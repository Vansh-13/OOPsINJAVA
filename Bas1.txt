//class -- is a logic
//object -- is instance of class
object are store in heap in java new student() //type
✅ Objects are stored in the Heap.
//but refernce store in stack;
✅ References (like s1, s2) are stored in the Stack.

//wrapper classes
Interger num=45;  wrapper claees are final not changes there values bhale hi y refernce ho
//alwayas intialize the final keyword while declaring it

//static //this all static belong to the class not a class object
Understanding static: //not realted any object
When a member is declared static, it can be accessed before any objects of its class are created,
and without reference to any object. You can declare both methods and variables to be static.
--> a ny static method usker ander non-static not accessabel; static only access static -->but vice-versa is true
//but it can access not-static in staitc jab hm instancce bna lenge ab access ho sakta h
static void fun(){
Main ob=new Main();
ob.m(); //m is non-static access only instance creted
}
--> static are compile time beacuse object crete runtime but sttic not relted object

//4 pillar oops
---> Inheritance  a class child extends base class
//super call the parent class constructor
Access Parent Constructor
super();  // Calls parent class constructor
Access Parent Method
super.methodName();  // Calls parent class method
Access Parent Variable
super.variableName;  // Access parent class variable
INHERITENCE
//in java refernce of subclass can not receve object of super clss
 b obj=new A()// not correct;
 A obj=new B() //this is right; This is upcasting, where a parent class reference (A) refers to a child class object
 //types of inheritence --> single inheritence one class extends another class
 --> multilevel inhertience-->  a is a parent b and b is a parent of c
 -->multile inhertane--> one class extending more than one classes;
 c extends a and b both; --> in java does not support in java (ambuity probelm)
 // that is solve by interfaces

-->heriachincal inheritance --> one class is inheritant by many classes
b parent a and c parent also a and d parent also a
-->hrbrid inheritance -->combinaiton of single and multiple inheritance // not i java hybrid because of multtiple inhertiace
However, Hybrid Inheritance can be implemented using Interfaces.


POLYMORPHISGAM -->poly-many morphism-ways to represent
///types of polymorphism
type1---> compile time or static time polymorsipm
this is achieve via method overloading. -->muitiple method with same name but paramneter,argumentp,types,return type can be different (eg multiple construcutre);

type2--> runtime time or dynamic time poilymoeishin
this is acieve via methos overriding --> when child class same method and parent class also same method -- this is oveririding
@Overide// check notation use for check purpose

//dynamice method dispatch --> dynamic polymorphism m use
Dynamic Method Dispatch ka concept Dynamic Polymorphism me use hota hai. Yeh runtime pe method resolution karta hai, jisme object type ke basis pe overridden method call hota hai, na ki reference type ke basis pe.
//final method can not overvide;
//static method cannot ovrride it can be inherited not oveeride

//Ecuplsulation (hide in the single unit)
wrap up the implimantation of the data and method in a class

//abstraction (hiding the unneccsary details but showing the valuable information)

//encuplsution solve the implements solve the issue;--> in enc data can be private or public both but when we apply data hiding so data is private;and access by the public getter and setter;

//abstration solve the design level issue;

//ACCESS MODIFIER
//by default -- in same package and subclass same package it is allow not differnt package is not allow
//by public-- it is acess anywhere
//nu private -- it is acees only with in class
//protected -- it is acces class,package,subclass same package,subclass diff package //subclass means iherit somethign

 //Abstract
 //function dont have the boady that is abstrctmethod and child child override this method
 abstract void carrer(String name); //abstract method
 any classes have one or more abstract method it is declare abstract
//int age class crtea normal variabel is allow int age;
//not create of the object of the abstract class
//not cretea a abstract constructure in their abstract class
//abstract static method -- static not be oveeriden but abstract is overriden so abstract there not allow abstract static method also
//only static method is allow in astract class static void g(){
sout
}
//in therir abstract noraml methos is also  allow with definaltion
//in their also static ,int ,final variabel allow;
//NOt suppost multiple inheirtanc beacuse normal nmethos alllow h isme;







